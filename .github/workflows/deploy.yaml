# Deploy Money Tracker to Production
# Triggers on push to main branch

name: Deploy to Production

on:
  push:
    branches: [ "main" ]

jobs:
  deploy:
    runs-on: self-hosted

    defaults:
      run:
        working-directory: /root/news/_work/news/news

    env:
      NEXT_PUBLIC_NEWS_API_KEY: ${{ secrets.NEXT_PUBLIC_NEWS_API_KEY }}
      NEXT_PUBLIC_YOUTUBE_API_KEY: ${{ secrets.NEXT_PUBLIC_YOUTUBE_API_KEY }}
      NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET }}
      AUTH_SECRET: ${{ secrets.AUTH_SECRET }}
      DEPLOY_DIR: /root/news/news

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          path: /root/news/_work/news/news

      - name: Configure git for commits
        run: |
          git config user.name "github-actions"
          git config user.email "actions@users.noreply.github.com"

      - name: Auto-increment version
        run: |
          # Extract current version (robust fallback)
          CURRENT_VERSION=$(sed -n 's/.*v\([0-9][0-9]*\).*/\1/p' src/lib/sidenav.svelte | head -1)
          if [ -z "$CURRENT_VERSION" ]; then
            CURRENT_VERSION=0
          fi
          NEW_VERSION=$((CURRENT_VERSION + 1))
          CURRENT_DATE=$(date +"%d.%m.%Y")

          # Update version and date in sidenav
          sed -i "s/v${CURRENT_VERSION}/v${NEW_VERSION}/g" src/lib/sidenav.svelte
          sed -i "s/Updated: [0-9]\{2\}\.[0-9]\{2\}\.[0-9]\{4\}/Updated: ${CURRENT_DATE}/g" src/lib/sidenav.svelte

          git add src/lib/sidenav.svelte
          git diff-index --quiet HEAD || git commit -m "Bump version to v${NEW_VERSION} (${CURRENT_DATE})"

          echo "Version updated from v${CURRENT_VERSION} to v${NEW_VERSION}"
          echo "Date updated to ${CURRENT_DATE}"

      - name: Install dependencies
        run: npm ci

      - name: Commit lockfile changes
        continue-on-error: true
        run: |
          git add package-lock.json
          git diff-index --quiet HEAD || git commit -m "Update package-lock.json"

      - name: Build application
        run: npm run build

      - name: Create .env file
        run: |
          cat > .env << EOF
NEXTAUTH_SECRET=${{ secrets.NEXTAUTH_SECRET }}
AUTH_SECRET=${{ secrets.AUTH_SECRET }}
AUTH_TRUST_HOST=true
EOF

      - name: Deploy to production
        run: |
          echo "Deploying to ${{ env.DEPLOY_DIR }}..."
          mkdir -p "${{ env.DEPLOY_DIR }}"
          rm -rf "${{ env.DEPLOY_DIR }}"/*
          # copy build output (handle different build output directories) and runtime files
          cp -r build/* "${{ env.DEPLOY_DIR }}/" 2>/dev/null || true
          cp -r .output/* "${{ env.DEPLOY_DIR }}/" 2>/dev/null || true
          cp package.json "${{ env.DEPLOY_DIR }}/" 2>/dev/null || true
          cp package-lock.json "${{ env.DEPLOY_DIR }}/" 2>/dev/null || true
          cp ecosystem.config.cjs "${{ env.DEPLOY_DIR }}/" 2>/dev/null || true
          cp migrate.js "${{ env.DEPLOY_DIR }}/" 2>/dev/null || true
          cp .env "${{ env.DEPLOY_DIR }}/" 2>/dev/null || true

      - name: Install production dependencies
        run: npm ci --omit=dev
        working-directory: ${{ env.DEPLOY_DIR }}
        
      - name: Restart application
        run: |
          cd ${{ env.DEPLOY_DIR }}
          pm2 restart ecosystem.config.cjs || pm2 start ecosystem.config.cjs
