# Deploy news to Production
# Triggers on push to main branch

name: Deploy to Production

on:
  push:
    branches: [ "main" ]

jobs:
  deploy:
    runs-on: self-hosted

    defaults:
      run:
        working-directory: ${{ github.workspace }}

    env:
      DEPLOY_DIR: /var/www/news

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure git for commits
        run: |
          git config user.name "github-actions"
          git config user.email "actions@users.noreply.github.com"

      - name: Install dependencies
        run: npm install

      - name: Commit lockfile changes
        continue-on-error: true
        run: |
          git add package-lock.json
          git diff-index --quiet HEAD || git commit -m "Update package-lock.json"

      - name: Run build
        run: npm run build

      - name: Create .env file
        run: |
          echo "NEXTAUTH_SECRET=${{ secrets.NEXTAUTH_SECRET }}" > .env
          echo "AUTH_SECRET=${{ secrets.AUTH_SECRET }}" >> .env
          echo "AUTH_TRUST_HOST=true" >> .env
          echo "NEXT_PUBLIC_NEWS_API_KEY=${{ secrets.NEXT_PUBLIC_NEWS_API_KEY }}" >> .env
          echo "NEXT_PUBLIC_YOUTUBE_API_KEY=${{ secrets.NEXT_PUBLIC_YOUTUBE_API_KEY }}" >> .env
          echo "NEXT_PUBLIC_MEDIASTACK_API_KEY=${{ secrets.NEXT_PUBLIC_MEDIASTACK_API_KEY }}" >> .env

      - name: Deploy to production
        run: |
          echo "Deploying to ${{ env.DEPLOY_DIR }}..."
          mkdir -p "${{ env.DEPLOY_DIR }}"
          rm -rf "${{ env.DEPLOY_DIR }}"/*
          # copy standalone build output and runtime files
          cp -r .next/standalone/* "${{ env.DEPLOY_DIR }}/" 2>/dev/null || true
          # copy the entire .next directory (except standalone which is already copied)
          cp -r .next/* "${{ env.DEPLOY_DIR }}/.next/" 2>/dev/null || true
          # remove standalone from .next since it's already copied to root
          rm -rf "${{ env.DEPLOY_DIR }}/.next/standalone" 2>/dev/null || true
          cp package.json "${{ env.DEPLOY_DIR }}/" 2>/dev/null || true
          cp package-lock.json "${{ env.DEPLOY_DIR }}/" 2>/dev/null || true
          cp ecosystem.config.js "${{ env.DEPLOY_DIR }}/" 2>/dev/null || true
          cp .env "${{ env.DEPLOY_DIR }}/" 2>/dev/null || true

      - name: Install production dependencies
        run: npm install --omit=dev
        working-directory: ${{ env.DEPLOY_DIR }}
        
      - name: Restart application
        run: |
          cd ${{ env.DEPLOY_DIR }}
          pm2 restart ecosystem.config.js || pm2 start ecosystem.config.js
